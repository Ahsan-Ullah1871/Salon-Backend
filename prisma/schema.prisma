// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  User 
model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String
  phone_number  String
  address       String
  profile_image String?       @default("")
  password      String
  role          UserRole      @default(customer)
  workers       Worker[]
  files         UserFile[]
  appointments  Appointment[]
  reviews       Review[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  blog_psosts   BlogPost[]
  feedbacks     Feedback[]

  @@map("users")
}

//user  roles
enum UserRole {
  super_admin
  admin
  worker
  customer
}

//  Worker 
model Worker {
  id                String     @id @default(uuid())
  is_authorized     Boolean    @default(false)
  user_id           String
  user              User       @relation(fields: [user_id], references: [id])
  email             String     @unique
  name              String
  father_name       String
  mother_name       String
  is_married        Boolean    @default(false)
  phone_number      Int        @unique
  permanent_address String
  current_address   String
  national_id       Int
  birth_date        DateTime
  worker_history    CV[]
  schedules         Schedule[]
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt

  @@map("workers")
}

//  full cv details
model CV {
  id                      String   @id @default(uuid())
  worker_id               String
  worker                  Worker   @relation(fields: [worker_id], references: [id])
  age                     Int
  exp                     Int      @default(0)
  last_job_info           String   @default("")
  last_job_salary         Int?     @default(0)
  last_job_review         String?  @default("")
  last_job_leaving_reason String?  @default("")
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  @@map("cv")
}

// Categoy
model Category {
  id          String    @id @default(uuid())
  name        String
  image_url   String
  image_id    String
  image_desc  UserFile  @relation(fields: [image_id], references: [id])
  description String?   @default("")
  services    Service[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("categories")
}

// Categoy
model Service {
  id           String        @id @default(uuid())
  name         String
  image_url    String
  image_id     String
  image_desc   UserFile      @relation(fields: [image_id], references: [id])
  description  String        @default("")
  price        Int
  duration     String
  category_id  String
  category     Category      @relation(fields: [category_id], references: [id])
  is_available Boolean       @default(true)
  schedules    Schedule[]
  appointments Appointment[]
  reviews      Review[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  blog_posts   BlogPost[]

  @@map("services")
}

// schedules
model Schedule {
  id           String        @id @default(uuid())
  date         DateTime
  start_time   DateTime
  end_time     DateTime
  available    Boolean
  service_id   String
  service      Service       @relation(fields: [service_id], references: [id])
  provider_id  String
  worker       Worker        @relation(fields: [provider_id], references: [id])
  appointments Appointment[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  @@map("schedules")
}

// Appointment
model Appointment {
  id          String            @id @default(uuid())
  user_id     String
  user        User              @relation(fields: [user_id], references: [id])
  service_id  String
  service     Service           @relation(fields: [service_id], references: [id])
  schedule_id String
  schedule    Schedule          @relation(fields: [schedule_id], references: [id])
  is_paid     Boolean           @default(false)
  status      AppointmentStatus
  date        DateTime
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt

  @@map("appointments")
}

// appointment status
enum AppointmentStatus {
  BOOKED
  CONFIRMED
  CANCELED
  COMPLETED
  NO_SHOW
  RESCHEDULED
  PENDING
}

// Review
model Review {
  id      String @id @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  service_id String
  service    Service @relation(fields: [service_id], references: [id])

  rating     Int // A numerical rating (e.g., 1 to 5)
  comment    String? // An optional text comment from the user
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("reviews")
}

// BlogPost
model BlogPost {
  id          String    @id @default(uuid())
  title       String
  content     String
  tags        String
  author_id   String
  author      User      @relation(fields: [author_id], references: [id])
  service_id  String?
  service     Service?  @relation(fields: [service_id], references: [id])
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blog_posts")
}

// 
model Feedback {
  id         Int      @id @default(autoincrement())
  user_id    String
  user       User?    @relation(fields: [user_id], references: [id])
  feedback   String
  rating     Int // A numerical rating (e.g., 1 to 5)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("feedbacks")
}

// image
model UserFile {
  id          String     @id @default(uuid())
  title       String
  url         String
  asset_id    String
  format      String
  width       Int
  height      Int
  bytes       Int
  description String?    @default("")
  user_id     String
  user        User       @relation(fields: [user_id], references: [id])
  services    Service[]
  categories  Category[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("user_files")
}
